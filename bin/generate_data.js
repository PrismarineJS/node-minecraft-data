#!/usr/bin/env node

const dataSource = require('../minecraft-data/data/dataPaths')
const fs = require('fs')
const path = require('path')

const INLINE_LIMIT = 1024

function generateMap () {
  let data = '{\n'
  for (const platform in dataSource) {
    data += `  ${platform}: {\n`
    const platformData = dataSource[platform]
    for (const version in platformData) {
      data += `    "${version}": {\n`
      const versionData = platformData[version]
      for (const file in versionData) {
        const filePath = `./minecraft-data/data/${versionData[file]}/${file}.json`
        const relPath = path.join(__dirname, '.' + filePath)
        if (fs.statSync(relPath).size > INLINE_LIMIT) {
          data += `      "${file}": require("${filePath}"),\n`
        } else {
          data += `      "${file}": ${JSON.stringify(require(relPath))},\n`
        }
      }
      data += '    },\n'
    }
    data += '  },\n'
  }
  data += '}\n'
  return data
}

const data = `// DO NOT EDIT: THIS FILE IS AUTOGENERATED
// PLEASE RUN ./bin/generate_data.js INSTEAD
//
if (typeof global !== 'undefined' && global.global === global) {
const handlers = {
  get: function (target, prop) {
    switch (typeof target[prop]) {
      case 'string': return require('./minecraft-data/data/' + target[prop] + '/' + prop + '.json');
      case 'object': return new Proxy(target[prop], handlers);
      default: return target[prop];
    }
  }
};
module.exports = new Proxy(require('./minecraft-data/data/dataPaths'), handlers);
} else module.exports = ${generateMap()}`

fs.writeFileSync(path.join(__dirname, '/../data.js'), data)
